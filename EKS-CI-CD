import boto3
import requests

def lambda_handler(event, context):
    
    # Authenticate to the EKS cluster using IAM role.
    response = requests.get('http://169.254.169.254/latest/meta-data/iam/security-credentials/')
    role_name = response.text
    sts_client = boto3.client('sts')
    assumed_role_object = sts_client.assume_role(RoleArn=f'arn:aws:iam::{AWS_ACCOUNT_ID}:role/{role_name}',
                                                 RoleSessionName='AssumRoleSession1')
    session_id = assumed_role_object['Credentials']['AccessKeyId']
    session_key = assumed_role_object['Credentials']['SecretAccessKey']
    session_token = assumed_role_object['Credentials']['SessionToken']

    # Use authenticated session to interact with the EKS cluster.
    eks_client = boto3.client('eks', region_name='us-west-2',
                              aws_access_key_id=session_id,
                              aws_secret_access_key=session_key,
                              aws_session_token=session_token)
    
    # Define the YAML manifest for your deployment and use kubectl to create it in the EKS cluster.
    deployment_yaml = """
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: my-deployment
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: my-app
          template:
            metadata:
              labels:
                app: my-app
            spec:
              containers:
              - name: my-container
                image: my-registry/my-image
                ports:
                - containerPort: 5000
        """
    kubeconfig = eks_client.list_clusters()['clusters'][0]
    os.environ['KUBECONFIG'] = kubeconfig
    response = subprocess.run(['kubectl', 'apply', '-f', '-'], input=deployment_yaml,
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if response.returncode == 0:
        return {
            'statusCode': 200,
            'body': json.dumps('Deployment created successfully.')
        }
    else:
        return {
            'statusCode': 404,
            'body': json.dumps('Error occurred while creating deployment.')
        }

# This is an example Python script for a Lambda function that deploys a CI/CD pipeline in Amazon EKS. This is just a simple example to show how you can use Lambda to deploy a workload onto an EKS cluster using AWS SDK for Python (Boto3) and kubectl.

Note that the code requires setup of necessary IAM roles, policies, EKS clusters, VPC and other resources and will need further customization depending on your specific requirements.
